'''Задание 1 (2 балла): Дайте подробные ответы на следующие вопросы:

В чём смысл инкапсуляции? Приведите пример конкретной ситуации в коде, в которой нарушение инкапсуляции
приводит к проблемам.
Какой метод называется статическим? Что такое параметр self?
В чём отличия методов __new__ и __init__?
Какие виды отношений классов вы знаете? Для каждого приведите примеры. Укажите взаимные различия.
Зачем нужны фабрики? Опишите смысл использования фабричного метода, фабрики и абстрактной фабрики,
а также их взаимные отличия.'''
# В чём смысл инкапсуляции? Приведите пример конкретной ситуации в коде, в которой нарушение инкапсуляции
# приводит к проблемам.
'''
 Инкапсуляция – это свойство системы, позволяющее объединить данные и
методы, работающие с ними, в классе, и скрыть детали реализации.

Инкапсуляция обеспечивается следующими средствами:
• контроль доступа
• методы доступа
• свойства объекта
Контроль доступа.
  Поскольку методы класса могут быть как чисто внутренними,
обеспечивающими логику функционирования объекта, так и внешними, с
помощью которых взаимодействуют объекты, необходимо обеспечить
скрытость первых при доступности извне вторых. Для этого в языки вводятся
специальные синтаксические конструкции, явно задающие область видимости
каждого члена класса. Традиционно это модификаторы public, protected и
private, обозначающие, соответственно, открытые члены класса, члены класса,
доступные только из классов-потомков, и скрытые, доступные только внутри
класса. Конкретная номенклатура модификаторов и их точный смысл
различаются в разных языках. В Python есть два уровня доступа, соответствующие 
традиционным модификаторам public и private.

• методы доступа
  Поля класса в общем случае не должны быть доступны извне, поскольку такой
доступ позволил бы произвольным образом менять внутреннее состояние
объектов. Поэтому поля обычно объявляются скрытыми (либо язык в принципе
не позволяет обращаться к полям класса извне), а для доступа к находящимся в
полях данным используются специальные методы, называемые методами
доступа. Такие методы либо возвращают значение того или иного поля, либо
производят запись в это поле нового значения. При записи метод доступа
может проконтролировать допустимость записываемого значения и, при
необходимости, произвести другие манипуляции с данными объекта, чтобы
они остались корректными (внутренне согласованными). Методы доступа
называют ещё аксессорами (от англ. access – доступ), а по отдельности –
геттерами (англ. get – чтение) и сеттерами (англ. set – запись).

Свойства объекта
  Псевдополя, доступные для чтения и/или записи. Свойства внешне выглядят
как поля и используются аналогично доступным полям (с некоторыми
исключениями), однако фактически при обращении к ним происходит вызов
методов доступа. Таким образом, свойства можно рассматривать как «умные»
поля данных, сопровождающие доступ к внутренним данным объекта какими-
либо дополнительными действиями (например, когда изменение координаты
объекта сопровождается его перерисовкой на новом месте).'''
'''Пример. Если мы  изменим свойство __count  то случайно можем изменить значение и
счетчик нарушится'''
class B:
    __count = 0

    def __init__(self):
        B.__count += 1

    def __del__(self):
        B.__count -= 1

    def qty_objects():
        return B.__count
a = B()
b = B()
print(B.qty_objects())  # выведет 2

#Какой метод называется статическим? Что такое параметр self?
'''Статистическим методом назвается функция помещенная в класс
для удобства и находящиеся в пространстве имен этого класса. 
Так же он не может изменять ни состояние объекта, ни состояние класса.
Статические методы ограничены в том, к каким данным они могут получить доступ.
self - это ссылка на конкретный экземпляр класса. Методы одного и того же класса, не видят 
переменные в других методах. Для того что бы внутри класса переменную увидели другие методы,
и существует self'''
#В чём отличия методов __new__ и __init__?
'''Метод __new__ вызывается до __init__, принимает в качестве параметра класс и 
 должен вернуть экземпляр класса.'''
#Какие виды отношений классов вы знаете? Для каждого приведите примеры. Укажите взаимные различия.
'''
Наследование.'''
class А:
    def func():
        pass

class B(A):
    def func():
        pass
'''Множественное наследование'''


class А:
    def func():
        pass

class B:
    def func1():
        pass

class B(A, B):
    def func2():
        pass


# Зачем нужны фабрики? Опишите смысл использования фабричного метода, фабрики и абстрактной фабрики,
# а также их взаимные отличия.'