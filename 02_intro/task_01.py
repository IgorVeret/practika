'''Задание 1 (2 балла): Дайте подробные ответы на следующие вопросы:

В чём смысл инкапсуляции? Приведите пример конкретной ситуации в коде, в которой нарушение инкапсуляции
приводит к проблемам.
Какой метод называется статическим? Что такое параметр self?
В чём отличия методов __new__ и __init__?
Какие виды отношений классов вы знаете? Для каждого приведите примеры. Укажите взаимные различия.
Зачем нужны фабрики? Опишите смысл использования фабричного метода, фабрики и абстрактной фабрики,
а также их взаимные отличия.'''
# В чём смысл инкапсуляции? Приведите пример конкретной ситуации в коде, в которой нарушение инкапсуляции
# приводит к проблемам.
'''
 Инкапсуляция – это свойство системы, позволяющее объединить данные и
методы, работающие с ними, в классе, и скрыть детали реализации.


Пример. Если мы  изменим свойство __count  то случайно можем изменить значение и
счетчик нарушится'''
class B:
    __count = 0

    def __init__(self):
        B.__count += 1

    def __del__(self):
        B.__count -= 1

    def qty_objects():
        return B.__count
a = B()
b = B()
print(B.qty_objects())  # выведет 2

#Какой метод называется статическим? Что такое параметр self?
'''Статистическим методом назвается функция помещенная в класс
для удобства и находящиеся в пространстве имен этого класса. 
Так же он не может изменять ни состояние объекта, ни состояние класса.
Статические методы ограничены в том, к каким данным они могут получить доступ.
self - это ссылка на конкретный экземпляр класса. Методы одного и того же класса, не видят 
переменные в других методах. Для того что бы внутри класса переменную увидели другие методы,
и существует self'''
#В чём отличия методов __new__ и __init__?
'''Метод __new__ вызывается до __init__, принимает в качестве параметра класс и 
 должен вернуть экземпляр класса.'''
#Какие виды отношений классов вы знаете? Для каждого приведите примеры. Укажите взаимные различия.
'''
Наследование.'''
class А:
    def func():
        pass

class B(A):
    def func():
        pass
'''Множественное наследование'''


class А:
    def func():
        pass

class B:
    def func1():
        pass

class B(A, B):
    def func2():
        pass


# Зачем нужны фабрики? Опишите смысл использования фабричного метода, фабрики и абстрактной фабрики,
# а также их взаимные отличия.'
''' 
Фабрика нужна для производства результата. Пользователь отправляет переменные и получает нужный результат,
Не вдаваясь в подробности, как этот результат получен. 
Абстрактная фабрика - выполняет те же функции как и фабрика, но для получения результат используются
родительские классы.
'''